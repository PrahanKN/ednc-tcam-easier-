module tcam #(
parameter DATA_WIDTH = 32, parameter ENTRY_COUNT = 16, parameter HAMMING_THRESHOLD = 3)
(
    input wire clk,                          // Clock signal
    input wire reset,                        // Reset signal
    input wire write_enable,                 // Enable signal for writing data
    input wire [$clog2(ENTRY_COUNT)-1:0] write_index,  // Index to write to
    input wire [DATA_WIDTH-1:0] write_data,  // Data to write
    input wire [DATA_WIDTH-1:0] write_mask,  // Mask for "don't care" bits
    input wire [DATA_WIDTH-1:0] search_key,  // Key to search
    output reg match,                        // High if there is a match
    output reg [$clog2(ENTRY_COUNT)-1:0] match_index  // Index of the matched entry
);

    // Memory arrays for TCAM data and mask
    reg [DATA_WIDTH-1:0] tcam_data [0:ENTRY_COUNT-1];
    reg [DATA_WIDTH-1:0] tcam_mask [0:ENTRY_COUNT-1];

    // Internal wires for XOR results and Hamming distance calculations
    wire [ENTRY_COUNT-1:0] hamming_valid;        // Indicates if the Hamming distance is within threshold
    wire [DATA_WIDTH-1:0] xor_result [0:ENTRY_COUNT-1];
    wire [$clog2(DATA_WIDTH):0] hamming_distance [0:ENTRY_COUNT-1]; // Hamming distance for each entry

    // Generate block to calculate Hamming distance for each entry
    genvar i;
    generate
        for (i = 0; i < ENTRY_COUNT; i = i + 1) begin : hamming_loop
            assign xor_result[i] = (tcam_data[i] & ~tcam_mask[i]) ^ (search_key & ~tcam_mask[i]); // XOR to identify differing bits
            assign hamming_distance[i] = count_ones(xor_result[i]);  // Calculate Hamming distance
            assign hamming_valid[i] = (hamming_distance[i] <= HAMMING_THRESHOLD);  // Check if Hamming distance is within threshold
        end
    endgenerate
    // Function to count the number of 1s (Hamming distance)
function integer count_ones;
    input [DATA_WIDTH-1:0] value;
    integer i;
    begin
        count_ones = 0;
        for (i = 0; i < DATA_WIDTH; i = i + 1) begin
            if (value[i]) count_ones = count_ones + 1;
        end
    end
endfunction

    // Priority encoder to find the first valid match based on Hamming distance
    integer k;
// Priority encoder to find the first valid match
always @(*) begin
    match = 0;
    match_index = 0;
    for (k = 0; k < ENTRY_COUNT; k = k + 1) begin
        if (!match && hamming_valid[k]) begin
            match = 1;
            match_index = k;
        end
    end
end
            integer m;

    // Write logic to update TCAM entries during positive clock edge
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (m = 0; m < ENTRY_COUNT; m = m + 1) begin
                tcam_data[m] <= 0;    // Reset data
                tcam_mask[m] <= 0;    // Reset mask
            end
        end else if (write_enable) begin
            tcam_data[write_index] <= write_data;  // Store data in the specified entry
            tcam_mask[write_index] <= write_mask;  // Store mask in the specified entry
        end
    end

endmodule
