module tcam_sdpram #(
    parameter ADDR_WIDTH = 8,   // Address width
    parameter DATA_WIDTH = 4    // Data width
)(
    input clk,
    input rst,                  // Synchronous reset
    input wea,                  // Write enable
    input [ADDR_WIDTH-1:0] addra,  // Address for writing
    input [ADDR_WIDTH-1:0] addrb,  // Address for reading
    input [DATA_WIDTH-1:0] dina,   // Data input
    output reg [DATA_WIDTH-1:0] readb  // Data output (synchronous update)
);

    // RAM with 7 bits: 4 data + 3 parity bits
    reg [6:0] ram[2**ADDR_WIDTH-1:0];

    // Initialize RAM at the start
    integer i;
    initial begin
        for (i = 0; i < 2**ADDR_WIDTH; i = i + 1) begin
            ram[i] = 7'b0000000;  // Initialize all RAM locations to zero
        end
    end

    // Hamming encoding function to store 7 bits (4 data + 3 parity bits)
         function [6:0] hamming_encode(input [3:0] data);
        reg [6:0] result;
        begin
        // Store the 4 data bits (D3-D0)
        result[6] = data[3];
        result[5] = data[2]; 
        result[4] = data[1];  
        result[2] = data[0];  

        // Calculate Parity Bits
        result[0] = result[6] ^ result[4] ^ result[2];  // P1 (Bit 0)
        result[1] = result[6] ^ result[5] ^ result[2];  // P2 (Bit 1)
        result[3] = result[6] ^ result[5] ^ result[4];  // P3 (Bit 2)       
        hamming_encode = result;    
        end
    endfunction

    // Synchronous Write Operation
    always @(posedge clk) begin
        if (wea) begin
            ram[addra] <= hamming_encode(dina);  // Write the encoded data
        end
    end

    // Synchronous Read Operation
    always @(posedge clk) begin
        if (rst) begin
            readb <= 4'b0000;  // Reset output
        end else begin
            readb <= {ram[addrb][6], ram[addrb][5], ram[addrb][4], ram[addrb][2]};  
  // Extract and return the data bits
        end
    end

endmodule
