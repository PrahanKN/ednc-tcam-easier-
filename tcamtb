module tb_tcam;
    // Parameters
    parameter DATA_WIDTH = 32;
    parameter ENTRY_COUNT = 16;
    parameter HAMMING_THRESHOLD = 2;

    // Testbench signals
    reg clk;
    reg reset;
    reg write_enable;
    reg [$clog2(ENTRY_COUNT)-1:0] write_index;
    reg [DATA_WIDTH-1:0] write_data;
    reg [DATA_WIDTH-1:0] write_mask;
    reg [DATA_WIDTH-1:0] search_key;
    wire match;
    wire [$clog2(ENTRY_COUNT)-1:0] match_index;

    // Instantiate the DUT
    tcam #(
        .DATA_WIDTH(DATA_WIDTH),
        .ENTRY_COUNT(ENTRY_COUNT),
        .HAMMING_THRESHOLD(HAMMING_THRESHOLD)
    ) dut (
        .clk(clk),
        .reset(reset),
        .write_enable(write_enable),
        .write_index(write_index),
        .write_data(write_data),
        .write_mask(write_mask),
        .search_key(search_key),
        .match(match),
        .match_index(match_index)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns clock period
    end

    // Testbench procedure
    initial begin
        // Initialize signals
        reset = 1;
        write_enable = 0;
        write_index = 0;
        write_data = 0;
        write_mask = 0;
        search_key = 0;

        // Apply reset
        #10 reset = 0;

        // Write entries into the TCAM
        // Entry 0: Data = 32'hAAAAAAAA, Mask = 32'h00000000
        #10 write_enable = 1; write_index = 0; write_data = 32'hAAAAAAAA; write_mask = 32'h00000000;
        #10 write_enable = 0;

        // Entry 1: Data = 32'h55555555, Mask = 32'h00000000
        #10 write_enable = 1; write_index = 1; write_data = 32'h55555555; write_mask = 32'h00000000;
        #10 write_enable = 0;

        // Entry 2: Data = 32'hFFFF0000, Mask = 32'h0000FFFF
        #10 write_enable = 1; write_index = 2; write_data = 32'hFFFF0000; write_mask = 32'h0000FFFF;
        #10 write_enable = 0;

        // Perform searches
        // Case 1: Exact match with Entry 0
        #10 search_key = 32'hAAAAAAAA;
        #10;
        if (match && match_index == 0) $display("Test Case 1 Passed");
        else $display("Test Case 1 Failed");

        // Case 2: Match within Hamming distance of Entry 1
        #10 search_key = 32'h55555550; // 2-bit difference
        #10;
        if (match && match_index == 1) $display("Test Case 2 Passed");
        else $display("Test Case 2 Failed");
      
        // Case 3: No match due to Hamming threshold
        #10 search_key = 32'h12345678; // Large difference
        #10;
        if (!match) $display("Test Case 3 Passed");
        else $display("Test Case 3 Failed");

        // Case 4: Match with Entry 2 ignoring masked bits
        #10 search_key = 32'hFFFF1234; // Masked lower 16 bits
        #10;
        if (match && match_index == 2) $display("Test Case 4 Passed");
        else $display("Test Case 4 Failed");
              
        $monitor("match value= %d and match_index= %d\n",match,match_index);
        // Finish simulation
        #10 $stop;
    end

endmodule
